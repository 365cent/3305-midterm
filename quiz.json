[
    {
        "question": "Managing what is in memory and when is the responsibility of the running process",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is not a factor to consider when deciding which storage medium to use",
        "options": [
            "Volatility",
            "Cost",
            "Speed",
            "Weight"
        ],
        "answer": "Weight"
    },
    {
        "question": "To prevent a process from running too long the operating system uses a",
        "options": [
            "DMA to limit CPU time",
            "Switch",
            "Cache",
            "Timer"
        ],
        "answer": "Timer"
    },
    {
        "question": "Main memory is an example of Nonvolatile storage (NVS)",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is not a service commonly provided by an operating system?",
        "options": [
            "Process communication",
            "I/O operations",
            "Error detection",
            "Code compilation"
        ],
        "answer": "Code compilation"
    },
    {
        "question": "Which of the following is not a component of a process?",
        "options": [
            "Heap",
            "These are all components of a process",
            "Stack",
            "Text"
        ],
        "answer": "These are all components of a process"
    },
    {
        "question": "A context switch consumes CPU time",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "A parent and child process always share the same block of memory",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A parent process must wait for its child processes to finish before it can execute instructions.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "If a program declares a variable before a fork() the child and the parent can communicate with one another using that variable.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is a reason why two processes may want to cooperate?",
        "options": [
            "Speed",
            "Convenience",
            "Sharing Information",
            "All of these"
        ],
        "answer": "All of these"
    },
    {
        "question": "When two processes communicate using an unbounded buffer, the producer may need to wait before writing to the buffer.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "The greater the serial portion of a task, the greater the expected performance gains by adding parallelism.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Suppose a program can run 10% serial and 90% parallel. Using Amdahl's Law, calculate the expected performance gain by adding 16 cores.",
        "options": [
            "15",
            "3.3",
            "6.4",
            "12.1"
        ],
        "answer": "6.4"
    },
    {
        "question": "Which of the following is not a benefit of multithreading?",
        "options": [
            "Threads can easily share variables",
            "CPU instructions execute faster when run in a thread",
            "Applications respond to user input faster",
            "Threads can run on multiple CPUs or multiple cores concurrently"
        ],
        "answer": "CPU instructions execute faster when run in a thread"
    },
    {
        "question": "In a nonpreemptive scheduling scheme, the next process to run is",
        "options": [
            "The next process in the queue",
            "The process in the queue with the highest priority",
            "A randomly selected process",
            "The process in the queue with the shortest run time"
        ],
        "answer": "The next process in the queue"
    },
    {
        "question": "One drawback to Priority scheduling is",
        "options": [
            "Longer average waiting time compared to most other scheduling algorithms",
            "Process priority cannot change",
            "All of these",
            "The potential for starvation"
        ],
        "answer": "The potential for starvation"
    },
    {
        "question": "In Round-Robin CPU scheduling, if there are 10 processes in the ready queue and the time quantum is 3ms, then no process waits more than",
        "options": [
            "None of these",
            "20ms",
            "30ms",
            "27ms"
        ],
        "answer": "27ms"
    },
    {
        "question": "In Multilevel queue scheduling, which of the following is not true?",
        "options": [
            "Processes can move between the queues",
            "Starvation is possible",
            "Each queue is assigned a priority level",
            "Different queues can use different scheduling algorithms"
        ],
        "answer": "Processes can move between the queues"
    },
    {
        "question": "To balance tasks across multicores, an operating system may employ which strategy?",
        "options": [
            "Periodically check for cores with too many tasks and push some of those tasks to other cores",
            "Either strategy could be used",
            "Periodically check for cores that have too few tasks and pull some tasks from other cores"
        ],
        "answer": "Either strategy could be used"
    },
    {
        "question": "Shared data that is always read-only does not necessarily need to be used in a critical section.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "Mutex locks and semaphores are identical concepts. Programmers choose one or the other as a matter of style.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which storage medium certain process data is stored on does not influence process speed",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Main memory is an example of Nonvolatile storage (NVS)",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Windows has been used as a desktop operating system only",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A process is by definition a program in execution",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "If an application fails the operating system can sometimes generate a",
        "options": [
            "Core dump",
            "Application dump",
            "Crash dump",
            "File-system dump"
        ],
        "answer": "Core dump"
    },
    {
        "question": "An area of memory containing process information such as process state, CPU registers, I/O status information, etc is known as",
        "options": [
            "Process Status File",
            "CPU Registry",
            "CPU Control Block",
            "Process Control Block"
        ],
        "answer": "Process Control Block"
    },
    {
        "question": "A context switch consumes CPU time",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "A parent process must wait for its child processes to finish before it can execute instructions",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "If a program declares a variable before a fork() the child and the parent can communicate with one another using that variable",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A parent and child process always share the same block of memory",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which storage medium certain process data is stored on does not influence process speed",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Main memory is an example of Nonvolatile storage (NVS)",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Windows has been used as a desktop operating system only",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A process is by definition a program in execution",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "If an application fails the operating system can sometimes generate a",
        "options": [
            "Core dump",
            "Application dump",
            "Crash dump",
            "File-system dump"
        ],
        "answer": "Core dump"
    },
    {
        "question": "The primary purpose of an operating system is:",
        "options": [
            "To make the most efficient use of the computer hardware",
            "To allow people to use the computer",
            "To keep systems programmers employed",
            "To make computers easier to use"
        ],
        "answer": "To make the most efficient use of the computer hardware"
    },
    {
        "question": "The operating system kernel is:",
        "options": [
            "The same thing as the CPU",
            "A low-level part of the system that interfaces directly with the hardware",
            "An application like a word processor",
            "Part of the application software"
        ],
        "answer": "A low-level part of the system that interfaces directly with the hardware"
    },
    {
        "question": "Interrupts are:",
        "options": [
            "An efficient way of multitasking",
            "Generated by exceptional conditions in the CPU",
            "Signals that inform the OS that an event has occurred",
            "Used to start a computer"
        ],
        "answer": "Signals that inform the OS that an event has occurred"
    },
    {
        "question": "Message passing is typically faster than shared memory.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is a reason why two processes may want to cooperate?",
        "options": [
            "Speed",
            "All of these",
            "Convenience",
            "Sharing Information"
        ],
        "answer": "All of these"
    },
    {
        "question": "Unlike forking, if the parent thread of a multithreaded process exits, all of its 'child' threads will also exit.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "If a process has multiple threads and one of the threads calls fork(), the child process will also be multithreaded.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "In a one-to-one multithreading model, the developer can use only single-threading.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Context switching is managed by the",
        "options": [
            "Dispatcher",
            "Switcher",
            "CPU",
            "Scheduler"
        ],
        "answer": "Dispatcher"
    },
    {
        "question": "Consider the following processes in the ready queue with the following CPU burst times. Match the following scheduling algorithms with the order of processes",
        "options": [
            "FCFS: P1, P2, P3",
            "SJF: P2, P3, P1",
            "LCFS: P3, P2, P1",
            "RR (Quantum 10): P1, P2, P3, P1"
        ],
        "answer": "FCFS: P1, P2, P3, SJF: P2, P3, P1, LCFS: P3, P2, P1, RR (Quantum 10): P1, P2, P3, P1"
    },
    {
        "question": "In Round-Robin CPU scheduling, if there are 10 processes in the ready queue and the time quantum is 3ms, then no process waits more than",
        "options": [
            "27ms",
            "30ms",
            "20ms",
            "None of these"
        ],
        "answer": "27ms"
    },
    {
        "question": "With a Multilevel Feedback Queue scheduling algorithm, once the scheduler has placed the process in a queue, it could be moved to a different queue later.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "One drawback to Priority scheduling is",
        "options": [
            "Longer average waiting time compared to most other scheduling algorithms",
            "The potential for starvation",
            "All of these",
            "Process priority cannot change"
        ],
        "answer": "The potential for starvation"
    },
    {
        "question": "To select a process to run in a multiprocessor architecture, the scheduler will assign processes to a core from",
        "options": [
            "Either a common or a private ready queue is possible",
            "Common ready queue",
            "Private ready queue"
        ],
        "answer": "Either a common or a private ready queue is possible"
    },
    {
        "question": "Which of the following is not a necessary criterion for a solution to the critical section problem?",
        "options": [
            "All processes with a critical section must employ mutual exclusion",
            "If the shared resource is available for use, any process that wants to use it can secure the resource and enter its critical section",
            "A process may not prevent other processes from ever entering their critical section",
            "All processes that wish to use a shared resource must have an equal chance of obtaining the shared resource"
        ],
        "answer": "All processes that wish to use a shared resource must have an equal chance of obtaining the shared resource"
    },
    {
        "question": "Peterson's solution is a common strategy employed by modern operating systems to solve the critical section problem",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A semaphore can be implemented as a mutex lock",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A common approach used by most modern operating systems to manage process synchronization is to temporarily disable interrupts",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A CPU may have multiple layers of caching",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "To prevent a process from running too long, the operating system uses a ____ to limit CPU time",
        "options": [
            "Timer",
            "Cache",
            "Switch",
            "DMA"
        ],
        "answer": "Timer"
    },
    {
        "question": "Emulation and Virtualization are identical terms",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which storage medium certain process data is stored on does not influence process speed",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "All modern operating system employ a layered operating system structure only",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "If an application fails, the operating system can sometimes generate a",
        "options": [
            "Application dump",
            "Crash dump",
            "Core dump",
            "File-system dump"
        ],
        "answer": "Core dump"
    },
    {
        "question": "When an interrupt is signaled, the CPU will finish its current task and address the interrupt when the task is complete.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A process is, by definition, a program in execution",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "Which of the following is not a factor to consider when deciding which storage medium to use",
        "options": [
            "Volatility",
            "Weight",
            "Cost",
            "Speed"
        ],
        "answer": "Weight"
    },
    {
        "question": "An operating system must have a user interface",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Main memory is an example of Nonvolatile storage",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is not a service commonly provided by an operating system?",
        "options": [
            "I/O operations",
            "Code compilation",
            "Error detection",
            "Process communication"
        ],
        "answer": "Code compilation"
    },
    {
        "question": "Using data in registers is faster than using data in memory",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "The first computers used a very basic operating system",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is not a component of a process",
        "options": [
            "Heap",
            "Text",
            "These are all components of a process",
            "Stack"
        ],
        "answer": "These are all components of a process"
    },
    {
        "question": "A context switch consumes CPU time",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "A child may share which resources with a parent?",
        "options": [
            "All",
            "None",
            "All of these are possibilities",
            "Some"
        ],
        "answer": "All of these are possibilities"
    },
    {
        "question": "A process whose parent process that does not wait on it is known as a",
        "options": [
            "Orphan process",
            "Non-waited process",
            "Zombie process",
            "Runaway process"
        ],
        "answer": "Zombie process"
    },
    {
        "question": "If a program declares a variable before a fork(), the child and the parent can communicate with one another using that variable.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "A process whose parent process has already terminated is known as a",
        "options": [
            "Runaway process",
            "Non-waiting process",
            "Zombie process",
            "Orphan process"
        ],
        "answer": "Orphan process"
    },
    {
        "question": "A parent process must wait for its child processes to finish before it can execute instructions.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Direct communication message passing is an example of which type of communication model?",
        "options": [
            "These are all possible",
            "One-to-many",
            "One-to-one",
            "Many-to-many"
        ],
        "answer": "One-to-one"
    },
    {
        "question": "Which of the following is a reason why two processes may want to cooperate",
        "options": [
            "All of these",
            "Speed",
            "Sharing Information",
            "Convenience"
        ],
        "answer": "All of these"
    },
    {
        "question": "Message passing is typically faster than shared memory.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "When two processes communicate using an unbounded buffer, the consumer may need to wait before reading from the buffer.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "Which of the following is not true about ordinary pipes?",
        "options": [
            "It uses non-blocking send",
            "It uses blocking receive",
            "It uses indirect message passing",
            "It uses a bounded capacity buffer"
        ],
        "answer": "It uses indirect message passing"
    },
    {
        "question": "In modern computing, multithreading an application is no longer a common strategy",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Suppose a program can run 20% serial and 80% parallel. Using Amdahl's Law, calculate the expected performance gain by adding 4 cores.",
        "options": [
            "2",
            "1.5",
            "4",
            "2.5"
        ],
        "answer": "2.5"
    },
    {
        "question": "To notify a process that a particular event has occurred, one would send the process",
        "options": [
            "A signal",
            "A handler",
            "An interrupt",
            "An alarm"
        ],
        "answer": "A signal"
    },
    {
        "question": "Unlike forking, if the 'parent' thread of a multithreaded process exits, all of its 'child' threads will also exit.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "Most modern operating systems use a nonpreemptive scheduling scheme",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "With a Multilevel Feedback Queue scheduling algorithm, once the scheduler has placed the process in a queue, it could be moved to a different queue later.",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "One drawback to Priority scheduling is",
        "options": [
            "All of these",
            "Process priority cannot change",
            "Longer average waiting time compared to most other scheduling algorithms",
            "The potential for starvation"
        ],
        "answer": "The potential for starvation"
    },
    {
        "question": "Consider the following processes in the ready queue with the following CPU burst times. Match the following scheduling algorithms with the order of processes",
        "options": [
            "FCFS: P1, P2, P3",
            "SJF: P2, P3, P1",
            "LCFS: P3, P2, P1",
            "RR (Quantum 10): P1, P2, P3, P1"
        ],
        "answer": "1:D, 2:C, 3:A, 4:B"
    },
    {
        "question": "Round-Robin scheduling ensures that starvation cannot occur",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "What is the average wait time for these processes if using the SJF scheduling algorithm",
        "options": [
            "~2.3ms",
            "~6.7ms",
            "There is not enough information",
            "~2.5ms"
        ],
        "answer": "~2.3ms"
    },
    {
        "question": "A software-generated interrupt is known as a",
        "options": [
            "Segfault",
            "Signal",
            "Trap",
            "Overflow"
        ],
        "answer": "Trap"
    },
    {
        "question": "The CPU cache is storage space built into the CPU itself",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "If an application fails, the operating system can sometimes generate a",
        "options": [
            "File-system dump",
            "Crash dump",
            "Application dump",
            "Core dump"
        ],
        "answer": "Core dump"
    },
    {
        "question": "Changing from one user to a user with higher privileges is known as",
        "options": [
            "Impersonating privilege",
            "Sudo-ing",
            "Privilege escalation",
            "Two-step authentication"
        ],
        "answer": "Privilege escalation"
    },
    {
        "question": "An area of memory containing process information such as process state, CPU registers, I/O status information, etc. is known as a",
        "options": [
            "CPU Control Block",
            "Process Control Block",
            "CPU Registry",
            "Process Status File"
        ],
        "answer": "Process Control Block"
    },
    {
        "question": "When a process changes from one to another, the operating system must perform a",
        "options": [
            "Context Switch",
            "Save State",
            "Reload",
            "Interrupt"
        ],
        "answer": "Context Switch"
    },
    {
        "question": "If the developer does not write a handler for a signal, the kernel has a default handler for the signal",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "The greater the serial portion of a task, the greater the expected performance gains by adding parallelism.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    },
    {
        "question": "Which of the following is a benefit of using a many-to-one multithreading model?",
        "options": [
            "There doesn't have to be a relationship between user threads and kernel threads",
            "More efficient use of resources",
            "The developer doesn't have to manage the threads. The kernel manages the threads instead.",
            "The kernel limits how many threads a developer can actually create, limiting the developer's ability to overwhelm the system"
        ],
        "answer": "The kernel limits how many threads a developer can actually create, limiting the developer's ability to overwhelm the system"
    },
    {
        "question": "In a nonpreemptive scheduling scheme, the next process to run is",
        "options": [
            "The process in the queue with the shortest run time",
            "A randomly selected process",
            "The next process in the queue",
            "The process in the queue with the highest priority"
        ],
        "answer": "The next process in the queue"
    },
    {
        "question": "It is sometimes a good idea to keep a task assigned to a specific core rather than re-balance it to another core",
        "options": [
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "question": "Asymmetric multiprocessing is the most common multiprocessing strategy used by operating systems.",
        "options": [
            "True",
            "False"
        ],
        "answer": "False"
    }
]